<?php namespace JerryLib\User;

    use Illuminate\Support\Facades\Session;
    use JerryLib\DB\tabHad;
    use JerryLib\User\Auth;
    use JerryLib\System\Init;
    use JerryLib\System\Common;
    use JerryLib\User\userLog;

    /**
     * Class userManage
     * @package JerryLib\User
     * 用户管理类
     */
    class userManage {

        use Init;

        private static $_loginErrorTime = 0;
        protected $logDoc;
        protected $lockDoc;
        protected $sessionDoc;
        protected $userTable;

        /**
         * 构造函数
         */
        private function __construct($userTable = 'p_users') {
            $this->userTable = $userTable;
            $this->logDoc = userLog::Init('log_user');
            return $this;
        }

        /**
         * 检查用户登录
         * @param $post
         */
        public function checkLogin($post) {
            //首先检查自定义key是否一致
            if(session('loginkey') != 1234554321) {
                throw new \Exception('对不起,您不能访问');
            }
            //对所有外来参数进行过滤
            $post = Common::sql_injection($post);
            //然后检查用户名,密码,验证码格式是否正确
            if(!Common::checkUser($post['account'])) {
                throw new \Exception('用户名格式错误');
            }
            if(!Common::checkPwd($post['password'])) {
                throw new \Exception('密码格式错误');
            }
            if(isset($post['verify']) && !Common::checkVerify($post['verify'])) {
                throw new \Exception('验证码格式错误');
            }
            //然后检查用户帐号或者IP是否被限制
            $this->lockDoc = tabHad::Init('p_userlock'); //实例化用户封禁表
            $this->checkUserlock($post['account'])->checkIplock(Common::get_real_ip()); //检查账号或IP是否被封禁
            //然后检查用户密码和验证码
            $userinfo = Auth::getUserInfo($post['account']);
            if(!$userinfo) { //验证用户是否存在
                throw new \Exception('用户不存在');
            }
            if($userinfo['password'] != Common::password($post['account'], $post['password'])) {
                $this->showLoginError('密码错误', $userinfo);
            }
            if(isset($post['verify']) && $post['verify']!=session('verify')) {
                $this->showLoginError('验证码错误', $userinfo);
            }
            //如果验证通过就记录登录成功日志和读取权限
            $this->logDoc->writeUserLog($userinfo['uid'], '登录系统成功', 1, 1);
            $isadmin = false;
            if($userinfo['level'] == 1) {
                $isadmin = true;
                Session::put('_AUTH_USER_ISADMIN', true);
            }
            if(Auth::getUserRules($userinfo['uid'], 1, $isadmin)) {
                Session::put([
                    '_AUTH_USER_ISLOGIN'    => true,
                    '_AUTH_USER_UID'        => $userinfo['uid'],
                    '_AUTH_USER_ACCOUNT'    => $userinfo['account'],
                    '_AUTH_USER_NICKNAME'   => $userinfo['nickname'],
                    '_AUTH_USER_INFO'       => $userinfo
                ]);
                Session::forget('verify'); //如果登录成功就销毁当前验证码
                Session::forget('passwordErrorTimes');
                return array('ret'=>0, 'msg'=>'success', 'url'=>'index');
            } else {
                throw new \Exception('登录异常');
            }
        }

        /**
         * 检查用户是否被封禁
         * @param $account
         */
        private function checkUserlock($account) {
            $data = $this->lockDoc->select('id,lockaccount,lockreason', "lockaccount='$account' and unlocktime>now()", 'limit 1');
            if(count($data)) {
                throw new \Exception('当前用户(' . $data[0]['lockaccount'] . ')因以下原因被限制登录：' . $data[0]['lockreason'] . ',请及时联系管理员!');
            }
            return $this;
        }

        /**
         * 检查用户IP是否被封禁
         * @param $ip
         */
        private function checkIplock($ip) {
            $data = $this->lockDoc->select('id,lockip,lockreason', "lockip='$ip' and unlocktime>now()", 'limit 1');
            if(count($data)) {
                throw new \Exception('当前IP(' . $data[0]['lockip'] . ')因以下原因被限制登录：' . $data[0]['lockreason'] . ',请及时联系管理员!');
            }
            return $this;
        }

        /**
         * 登录失败的话执行一系列判断
         * @param string $msg
         * @throws \Exception
         */
        private function showLoginError($msg = '', $userinfo) {
            //写入登录失败日志
            $this->logDoc->writeUserLog($userinfo['uid'], '登录系统失败,' . $msg, 0, 1);
            //读取30分钟之内失败次数
            self::$_loginErrorTime = $this->logDoc->getErrorTime($userinfo['uid']);
            //判断失败次数执行相应操作
            if(self::$_loginErrorTime>=3 && self::$_loginErrorTime<5) {
                Session::put('checkVerify', true); //开启验证码模式
            } elseif(self::$_loginErrorTime>=5 && self::$_loginErrorTime<10) {
                //限制半个小时之内不能登录
            } elseif(self::$_loginErrorTime>=10 && self::$_loginErrorTime<20) {
                //封帐号
                $this->lockUser('尝试暴力破解登录', $userinfo['account'], 'system');
            } elseif(self::$_loginErrorTime>=20) {
                //封IP
                $this->lockIp('尝试暴力破解登录', 'system');
            }
            Session::put(['loginErrorTime'=>self::$_loginErrorTime]);
            throw new \Exception($msg);
        }

        /**
         * 封号
         * @param string $lockreason
         * @param string $lockaccount
         * @param string $doaccount
         * @param string $unlocktime
         * @return $this
         */
        public function lockUser($lockreason = '', $lockaccount = '', $doaccount = '', $unlocktime = '') {
            $lockaccount or $lockaccount = session('_AUTH_USER_ACCOUNT');
            $doaccount or $doaccount = session('_AUTH_USER_ACCOUNT');
            $unlocktime or $unlocktime = '2019-01-01 00:00:00';
            $this->lockDoc->insert([
                'lockaccount' => $lockaccount,
                'doaccount' => $doaccount,
                'locktime' => date('Y-m-d H:i:s'),
                'lockreason' => $lockreason,
                'unlocktime' => $unlocktime
            ]);
            return $this;
        }

        /**
         * 封IP
         * @param string $lockreason
         * @param string $lockip
         * @param string $doaccount
         * @param string $unlocktime
         * @return $this
         */
        public function lockIp($lockreason = '', $doaccount = '', $lockip = '', $unlocktime = '') {
            $lockip or $lockip = Common::get_real_ip();
            $doaccount or $doaccount = session('_AUTH_USER_ACCOUNT');
            $unlocktime or $unlocktime = '2019-01-01 00:00:00';
            $this->lockDoc->insert([
                'lockip' => $lockip,
                'doaccount' => $doaccount,
                'locktime' => date('Y-m-d H:i:s'),
                'lockreason' => $lockreason,
                'unlocktime' => $unlocktime
            ]);
            return $this;
        }

        /**
         * 获取当前系统在线玩家数量
         */
        public function getOnlineNum() {
            $this->sessionDoc = tabHad::Init('p_sessions'); //实例化用户封禁表
            $data = $this->sessionDoc->select('count(id) num', 'last_activity > ' . (time() - 30*60));
            return $data[0]['num'];
        }

        /**
         * 用户退出执行操作
         * @param $uid
         */
        public function loginout($uid) {
            $this->logDoc->writeUserLog($uid, '登出系统成功', 1, 2);
        }

    }