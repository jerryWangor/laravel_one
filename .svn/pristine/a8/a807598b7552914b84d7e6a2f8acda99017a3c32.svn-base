<?php namespace JerryLib\DB;

	use DB;
    use JerryLib\System\Init;
    use JerryLib\System\Common;

    /**
     * Class tabHad
     * @package JerryLib\DB
     * 数据库表处理类
     * @date 2016.4.7
     * @author Jerry
     *
     */

	class tabHad {

        use Init;

        protected  $config; //配置文件
        protected  $attr; //数据数组
        private static $_instance = null; //单例模式实例化标识
        private static $_sql; //当前sql语句
        private static $_result; //当前结果集

		/**
		 * 构造函数
		 */
        private function __construct($table = 'p_users', $db = 'laravel') {
            $this->config = require(__DIR__ . '/../Config/Table.php');
            $this->attr['table'] = $table;
            $this->attr['db'] = $db;
            return $this;
        }

        /**
         * 克隆函数，防止克隆
         */
        private function __clone() {
            throw new \Exception('对不起,不能克隆!');
        }

        /**
         * 获得表名
         * @param bool $flag
         * @return string
         */
        public function getTableName($flag = true) {
            return ($flag ? $this->attr['db'] . '.' : '') . $this->attr['table'];
        }

        /**
         * 获得表所在的数据库
         * @return mixed
         */
        public function getDBName() {
            return $this->attr['db'];
        }

        /**
         * 数据验证，预防SQL注入
         * @param $data
         */
        private function dataValidate($data) {

        }

        /**
         * 数据过滤
         * @param $data
         */
        private function dataFilter($data, $type) {

        }

        /**
         * 单条插入语句
         */
        public function insert($data, $fp = '') {
            //在数据入库之前先对数据进行验证和过滤
            $keys = '';
            $values = '';
            //构造插入字段和值
            if(is_array($data)) {
                foreach($data as $key=>$value) {
                    if(Common::is_num($value)) {
                        $values .= $value . ',';
                    } else {
                        $values .= '\'' . $value . '\',';
                    }
                    $keys .= $key . ',';
                }
                $values = trim($values, ',');
                $keys = trim($keys, ',');
            }
            self::$_sql = 'insert into ' . $this->attr['db'] . '.' . $this->attr['table'] . '(' . $keys . ')' . ' values(' . $values . ');';
            if($fp) {
                fputs($fp, self::$_sql);
            } else {
                return DB::table($this->attr['table'])->insertGetId($data);
            }
        }

        /**
         * 原生查询语句
         * @param $finds
         * @param $where
         * @param $flag
         */
        public function select($finds = '*', $where = '', $flag = '') {
            if($finds) $finds = is_array($finds) ? implode(',', $finds) : $finds;
            if($where) $where = ' where ' . (is_array($finds) ? implode(' and ', $where) : $where);
            self::$_sql = 'select ' . $finds . ' from ' . $this->attr['db'] . '.' . $this->attr['table'] . $where . ' ' . $flag;
            return self::$_result = Common::objectToArray(DB::select(self::$_sql));
        }

        public function update($data, $where = '') {
            $sets = data;
            self::$_sql = 'update ' . $this->attr['db'] . '.' . $this->attr['table'] . ' set ' . $sets . $where;
        }

	}
